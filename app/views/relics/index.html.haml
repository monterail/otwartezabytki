= semantic_form_for tsearch, :url => relics_path, :method => :get, :remote => true do |f|
  = f.hidden_field :location, :value => f.object.location.join('-')
  .span3
    = render 'localization_facets'
    .sidebar-categories
      %h3 Kategorie:
      = f.input :categories, :as => :check_boxes, :collection => [categoires_facets('non_sacral').first], :disabled => disabled(f.object, 'categories'), :label => false
      - hidden_sacral = !f.object.categories.include?('sacral')
      = f.input :categories, :as => :check_boxes, :collection => [["#{t('category.groups.sakralny')} <em>#{relics.count('sacral')}</em>".html_safe, 'sacral']], :input_html => {:class => 'sacral-options'} ,:label => false
      .sacral-categories{:style => ('display:none;' if hidden_sacral)}
        = f.input :categories, :as => :check_boxes, :collection => categoires_facets('sacral'), :disabled => disabled(f.object, 'categories'), :label => false
      = f.input :categories, :as => :check_boxes, :collection => categoires_facets('non_sacral').drop(1), :disabled => disabled(f.object, 'categories'), :label => false

  %div{:class => relics.empty? ? "span9" : "span9"}
    #relics
      .form-advance-search
        %section.main-search
          .field.subject
            = f.input :q, :label => "Co:", :placeholder => "co", :input_html => { :class => 'autocomplete-q'}, :hint => "np. cmentarz, stocznie poniemieckie, chopinowski"

          .field.place
            = f.input :place, :label => "Gdzie:", :placeholder => "gdzie", :input_html => { :class => 'autocomplete-place'}, :hint => "np. Małkinia, ul. Grodzka w Krakowie"
          .field.time
            %label Data powstania:
            %span.block np. 1780, 1919-1913
            .wrap
              = f.input :from,  :label => "od:"
              = f.input :to,    :label => "do:"
          .field
            = f.action :submit, :label => 'Szukaj &raquo;'.html_safe, :button_html => { :name => nil }
          - hidden_filter = [f.object.state, f.object.has_photos, f.object.has_description, f.object.existence].flatten.compact.blank?
          = link_to 'Opcje filtrowania', '#', :class => ('filter-options ' + (hidden_filter ? '' : 'shown'))
        %section.second-search{:style => ('display:none;' if hidden_filter)}
          .wrap
            .column
              %h4
                = t('views.relics.index.states.label')
                .help
                  = image_tag 'ico-help.png'
                  .help-wrapper
                    = link_to t('views.relics.index.states.close'), '#', :class => 'close'
                    %h3= t('views.relics.index.states.header')
                    %ul
                      - ['checked', 'unchecked', 'filled'].each do |s|
                        %li
                          .tag
                            %span{:class => s}= t("views.relics.index.states.#{s}.header")
                          .text= t("views.relics.index.states.#{s}.info")

              = f.input :state, :label => false, :as => :check_boxes, :collection => state_facets, :disabled => disabled(f.object, 'state')
            .column
              %h4 Zawartość:
              = f.input :has_photos, :label => false, :as => :check_boxes, :collection => has_photos_facets, :disabled => disabled(f.object, 'has_photos')
              = f.input :has_description, :label => false, :as => :check_boxes, :collection => has_description_facets, :disabled => disabled(f.object, 'has_description')
            .column
              %h4 Rodzaj:
              = f.input :existence, :label => false, :as => :check_boxes, :collection => existence_facets, :disabled => disabled(f.object, 'existence')
        %section.order
          = f.input :order, :as => :select, :label => "sortuj według:", :collection => order_collection, :include_blank => false, :selected => f.object.order
      %section.results
        .loading{:style => 'display:none;'}
          #spin
          %h3 Trwa ładowanie wyników proszę czekać!!!
        - if relics.total.zero?
          .search-no-results
            %p
              Żaden z zabytków w naszej bazie
              %br
              nie spełnia podanych kryteriów.
            - if tsearch.suggestions.present?
              %p
                Czy chodziło ci może o:
                - tsearch.suggestions.each do |s|
                  = link_to relics_path(search_params(:q => s.name)), :remote => true do
                    %strong= "#{s.name},"

        - elsif relics.present?
          %div.relic-header.search
            %h2 Wyniki wyszukiwania (#{relics.total})
          = render :partial => "relics", :locals => {:collection => relics }

        = paginate relics, :remote => true