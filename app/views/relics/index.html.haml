.bootstrap-iso.js-remove-their-container
  .oz-border-line.container
    = semantic_form_for tsearch, :url => relics_path, :method => :get, :remote => true do |f|
      = f.hidden_field :location, :value => f.object.location.join('-')
      .col-md-3.oz-no-padding-lg-md
        = render 'localization_facets'
        .sidebar-categories
          %h3= t('views.relics.index.categories')
          .inputs-list.choices-group
            - Category.roots.sort_by(&:name).each do |c|
              - if c.name_key == 'sakralny'
                - hidden_sacral = !f.object.categories.include?('sakralny')
                = f.label :categories, :value => c.name_key do
                  = f.check_box :categories, {:multiple => true, :class => 'sacral-options'}, c.name_key, nil
                  %span
                    .name= c.name
                    %em= relics.count('sacral')
                .sacral-categories{:style => ('display:none;' if hidden_sacral)}
                  - c.children.sort_by(&:name).each do |child|
                    - next unless categories_facets_hash.keys.include?(child.name_key)
                    = render :partial => 'shared/category_checkbox', :locals => {:f => f, :category => child}
              - else
                - next unless categories_facets_hash.keys.include?(c.name_key)
                = render :partial => 'shared/category_checkbox', :locals => {:f => f, :category => c}

      .col-md-9.col-xs-12
        #relics
          .form-advance-search
            %section.main-search
              .field.subject.col-md-6.col-sm-12
                = f.input :q, :input_html => { :class => 'autocomplete-q'}
              .field.place.col-md-6.col-sm-12
                = f.input :place, :input_html => { :class => 'autocomplete-place'}
              .field.time.col-md-6.col-sm-12
                %label= t('views.relics.index.build_date')
                %span.block= t('views.relics.index.build_date_example')
                .wrap
                  = f.input :from
                  = f.input :to
              .field.col-md-6.col-sm-12
                = f.action :submit, :label => t('formtastic.actions.search_html', :editable => false), :button_html => { :name => nil }
                - hidden_filter = [f.object.state, f.object.has_photos, f.object.has_description, f.object.existence].flatten.compact.blank?
                = link_to t('views.relics.index.filter_options'), '#', :class => ('filter-options ' + (hidden_filter ? '' : 'shown'))
            %section.second-search{:style => ('display:none;' if hidden_filter)}
              .wrap
                .column.col-md-4.col-sm-12.col-xs-12
                  %h4
                    = t('views.relics.index.states.label')
                    .help
                      = image_tag 'ico-help.png'
                      .help-wrapper
                        = link_to t('views.relics.index.states.close'), '#', :class => 'close'
                        %h3= t('views.relics.index.states.header')
                        %ul
                          - ['unchecked', 'checked', 'filled'].each do |s|
                            %li= state_hint_tag(s)

                  = f.input :state, :label => false, :as => :check_boxes, :collection => state_facets, :disabled => disabled(f.object, 'state')
                .column.col-md-4.col-sm-12.col-xs-12
                  %h4= t('views.relics.index.content')
                  = f.input :has_photos, :label => false, :as => :check_boxes, :collection => has_photos_facets, :disabled => disabled(f.object, 'has_photos')
                  = f.input :has_description, :label => false, :as => :check_boxes, :collection => has_description_facets, :disabled => disabled(f.object, 'has_description')
                .column.col-md-4.col-sm-12.col-xs-12
                  %h4= t('views.relics.index.kind')
                  = f.input :existence, :label => false, :as => :check_boxes, :collection => existence_facets, :disabled => disabled(f.object, 'existence')
            %section.order
              = f.input :order, :as => :select, :collection => order_collection, :include_blank => false, :selected => f.object.order
          %section.results
            .loading{:style => 'display:none;'}
              #spin
              %h3= t('views.relics.index.loading')
            - if relics.total.zero?
              %section.search-no-results
                %p= t('views.relics.index.no_results_html')
                %p.no-results-info
                  =image_tag "icon-info.png"
                  = t('views.relics.index.no_results2_html')
                %footer.no-results-add
                  %p.no-results-info= t('views.relics.index.no_results_add_header')
                  = link_to t('views.relics.index.no_results_add'), new_relicbuilder_path(), :class => 'basic-button type-add'
            - elsif relics.present?
              %div.relic-header.search
                %h2= t('views.relics.index.search_results', :count => relics.total)
              = render :partial => "relics2", :locals => {:collection => relics }

            = paginate relics, :remote => true
