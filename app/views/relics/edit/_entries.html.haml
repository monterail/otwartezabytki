.row
  = semantic_form_for relic, :url => section_relic_path(relic.id, :section => :entries), :remote => true  do |f|
    = f.semantic_fields_for :entries, relic.entries.find(&:new_record?) do |f2|
      = f2.input :title
      = f2.input :body, :input_html => { :class => "redactor" }
    .actions
      = f.submit 'dodaj i zapisz'
      lub
      = link_to "anuluj", relic_path(relic.id), :remote => true
.row.entries-showcase{ :"data-replace" => (!params[:entry_id].nil? ? ".entries-showcase" : "#nonexistent") }
  - relic.entries.select{ |e| !e.new_record? }.sort_by(&:id).each do |entry|
    - if params[:entry_id].to_i == entry.id
      = semantic_form_for [relic, entry], :remote => true  do |f|
        = f.input :title, :hint => false
        = f.input :body, :hint => false, :input_html => { :class => "redactor" }
        = f.submit 'zapisz'
        = link_to 'usuÅ„', relic_entry_path(relic.id, entry.id), :method => :delete, :remote => true
        lub
        = link_to 'anuluj', edit_section_relic_path(relic.id, :section => :entries, :entry_id => 0), :remote => true
    - else
      = content_tag_for :article, entry do
        %h3= entry.title
        .body= sanitize entry.body
        = link_to 'aktualizuj', edit_section_relic_path(relic.id, :section => :entries, :entry_id => entry.id),
          :remote => true,
          :class => "update"